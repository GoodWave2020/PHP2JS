/** QuickRequest v1.0 | Script | (c) Raul Mauricio Uñate Castro | https://github.com/rmunate | MIT */
class QuickRequestException{constructor(e){let t=Error(e);throw console.error("⚠ QuickRequestException ⚠ | "+t.toString(),{name:t.name,message:t.message,trace:t.stack.split("\n").map(function(e){return e.trim().replaceAll("at ","\uD83D\uDD0D At: ")})})}}const QuickRequestHelpers={extractLastSegment(e,t="/"){if(!QuickRequestHelpers.isValueEmpty(e)){let i=e.split(t),s=i[i.length-1];return s}return""},isValueEmpty:e=>!!(null==e||"string"==typeof e&&""===e.trim()||Array.isArray(e)&&0===e.length)||"object"==typeof e&&0===Object.keys(e).length,getTokenCSRF(){let e=document.querySelector('meta[name="csrf-token"]');if(e)return e.getAttribute("content");throw new QuickRequestException('The meta tag "csrf-token" was not found. Please remember to add it in the head section: <meta name="csrf-token" content="{{ csrf_token() }}">')}};class QuickRequestValidate{constructor(e){let t=["url"];t.forEach(t=>{if(!e.hasOwnProperty(t))throw new QuickRequestException("The property '"+t+"' is mandatory in the request options.")})}}class QuickRequestElements{tagCheck(e){return["INPUT","TEXTAREA","SELECT"].includes(e.tagName)}typeCheck(e){return!["submit","button"].includes(e.type)}typeFile(e){return"file"===e.type}typeCheckboxOrRadio(e){return["radio","checkbox"].includes(e.type)}}class QuickRequestMain{constructor(){this.config={expect:"JSON",confirm:!1,activateEvent:!1,eventListener:{},preventDefault:!0,method:"GET",headers:{"X-CSRF-TOKEN":QuickRequestHelpers.getTokenCSRF(),Accept:"application/json"}}}eventListener(e,t){if(QuickRequestHelpers.isValueEmpty(e))throw new QuickRequestException("You must define a valid event within the eventListener method(<<Method>>,<<Selectors>>)");if(QuickRequestHelpers.isValueEmpty(t))throw new QuickRequestException("You must define a valid selector within the eventListener method(<<Method>>,<<Selectors>>)");return this.config.activateEvent=!0,this.config.eventListener.event=e,this.config.eventListener.selectors=document.querySelectorAll(t),this}preventDefault(e=!0){if(!0!==e&&!1!==e)throw new QuickRequestException("The argument can only be <<true>> or <<false>>, or omit it to default to <<true>>");return this.config.preventDefault=e,this}headers(e={}){return this.config.headers={...this.config.headers,...e},this}confirm(e){return this.config.confirm=e,this}post(e={}){this.config.method="POST",e.hasOwnProperty("headers")&&(this.headers(e.headers),delete e.headers),this.config.options=e,this.config.expect=e.expect||"JSON";let t=new QuickRequestEvents(this.config);return t.handler}get(e={}){this.config.method="GET",e.hasOwnProperty("headers")&&(this.headers(e.headers),delete e.headers),this.config.options=e,this.config.expect=e.expect||"JSON";let t=new QuickRequestEvents(this.config);return t.handler}put(e={}){this.config.method="PUT",e.hasOwnProperty("headers")&&(this.headers(e.headers),delete e.headers),this.config.options=e,this.config.expect=e.expect||"JSON";let t=new QuickRequestEvents(this.config);return t.handler}patch(e={}){this.config.method="PATCH",e.hasOwnProperty("headers")&&(this.headers(e.headers),delete e.headers),this.config.options=e,this.config.expect=e.expect||"JSON";let t=new QuickRequestEvents(this.config);return t.handler}delete(e={}){this.config.method="DELETE",e.hasOwnProperty("headers")&&(this.headers(e.headers),delete e.headers),this.config.options=e,this.config.expect=e.expect||"JSON";let t=new QuickRequestEvents(this.config);return t.handler}}class QuickRequestEvents{constructor(e){this.config=e,this.config.callbacksEvents=[],new QuickRequestValidate(this.config.options),this.checkEvent()}checkEvent(){if(this.config.activateEvent){let e=this;this.config.eventListener.selectors.forEach(function(t){let i=function(t){e.config.preventDefault&&t.preventDefault(),new QuickRequestFetch(e.config)};t.addEventListener(e.config.eventListener.event,i),e.config.callbacksEvents.push({element:t,event:e.config.eventListener.event,func:i})}),e.handler=new QuickRequesHandler(e.config)}else new QuickRequestFetch(this.config),this.handler=new QuickRequesHandler(this.config)}}class QuickRequestFetch{constructor(e){this.config=e,this.config.baseUrl=`${window.location.protocol}//${window.location.host}/`,this.config.formData=new FormData,this.config.hasFile=!1,this.dispatch()}data(){let e=this.config.options.form||null;if(null!==e){let t=new QuickRequestElements,i=[],s=document.getElementById(e);if(s)i=Array.from(s.elements);else throw new QuickRequestException("Could not find any form with the id "+e);i.forEach(e=>{t.tagCheck(e)&&t.typeCheck(e)&&(t.typeFile(e)?e.files.length>0&&(this.config.formData.append(e.name,e.files[0]),this.config.hasFile=!0):t.typeCheckboxOrRadio(e)?e.checked&&this.config.formData.append(e.name,e.value):QuickRequestHelpers.isValueEmpty(e.value)||this.config.formData.append(e.name,e.value))});let n=this.config.options.data||null;if(!QuickRequestHelpers.isValueEmpty(n))for(let[o,r]of Object.entries(n))this.config.formData.append(o,r)}else{let c=this.config.options.data||null;if(!QuickRequestHelpers.isValueEmpty(c))for(let[a,h]of Object.entries(c))this.config.formData.append(a,h)}}method(){let e=(this.config.baseUrl+this.config.options.url).replaceAll("//","/").replaceAll(":/","://"),t={};if(["GET","HEAD"].includes(this.config.method)){if(this.config.hasFile)throw new QuickRequestException("File uploads are not allowed with "+this.config.method+" due to URL length limitations; use POST instead.");if(e.includes("?"))throw new QuickRequestException("The URL appears to already have a query, as it contains the '?' character in its structure. In case you need to send additional data, use the 'data' property.");e=`${e}?${new URLSearchParams(this.config.formData).toString()}`,t={method:this.config.method,headers:this.config.headers}}else if(["PATCH","PUT","DELETE"].includes(this.config.method)){if(this.config.hasFile)throw new QuickRequestException("File uploads are not allowed with "+this.config.method+" as it uses JSON headers; use POST instead.");let i={};for(let[s,n]of this.config.formData.entries()){let o=s.includes("[]"),r=s.replace("[]","");if(void 0===i[r])o?i[r]=[n]:i[r]=n;else try{i[r].push(n)}catch(c){throw new QuickRequestException("Two distinct inputs, excluding Checkboxes and Radios, have the same name '"+r+"' without the square brackets '[]', which prevents them from being treated as the same data when sent to the backend as an array.")}}this.config.headers["Content-Type"]="application/json",t={method:this.config.method,headers:this.config.headers,body:JSON.stringify(i)}}else t={method:this.config.method,headers:this.config.headers,body:this.config.formData};for(let a of["mode","cache","credentials","redirect","referrerPolicy"])this.config.hasOwnProperty(a)&&(t[a]=this.config[a]);return{realUrl:e,realParams:t}}dispatch(){"function"==typeof this.config.confirm?!0===this.config.confirm()&&this.send():this.send()}async send(){this.data(),this.config.options.before&&"function"==typeof this.config.options.before&&this.config.options.before();let e={},t,i=this.method(),s=await fetch(i.realUrl,i.realParams);if(s.ok){try{if("json"==this.config.expect.toLowerCase().trim())t=await s.json();else if("text"==this.config.expect.toLowerCase().trim())t=await s.text();else if("blob"==this.config.expect.toLowerCase().trim())t=await s.blob();else throw Error("Only the values 'json', 'blob' or 'text' are allowed for the 'expect' property.")}catch(n){throw new QuickRequestException(n.message)}e={data:t,success:s.ok,code:s.status},this.config.options.success(e)}else{try{t=await s.json()}catch(o){t=s.statusText}let r={},c;if(t.hasOwnProperty("exception")&&t.hasOwnProperty("file")&&t.hasOwnProperty("message"))c=`File: ${QuickRequestHelpers.extractLastSegment(t.file)} - Line: ${t?.line} - Exception: ${t.message}`,t.trace.forEach(e=>{let t=QuickRequestHelpers.extractLastSegment(e.file);QuickRequestHelpers.isValueEmpty(t)||(r[QuickRequestHelpers.extractLastSegment(e.file)]=[`Line: ${e?.line}, File: ${e?.file}, Function: ${e?.function}`])}),t={errors:r,message:c};else if(!t.hasOwnProperty("errors")){if("object"==typeof t&&Object.keys(t).length>0){let a=0;for(let[h,u]of Object.entries(t))r[h]=Array.isArray(u)?u:[u],0==a&&(c=h),a++;let l=a-1;l>=1&&(c+=". (and "+(a-1)+" more error)")}else r[t]=[t],c=Array.isArray(t)?t[0]:t;t={errors:r,message:c}}r={data:t,success:s.ok,code:s.status},this.config.options.error&&"function"==typeof this.config.options.error&&this.config.options.error(r)}this.config.options.after&&"function"==typeof this.config.options.after&&this.config.options.after({success:s.ok,data:t,code:s.status})}}class QuickRequesHandler{constructor({callbacksEvents:e,headers:t,method:i,options:s,preventDefault:n}){this.getMethod=function(){return i},this.getEndPoint=function(){return s.url},this.getIdForm=function(){return s.form||null},this.getData=function(){return s.data||null},this.getCustomHeaders=function(){return t},this.getEvents=function(){return{preventDefault:QuickRequestHelpers.isValueEmpty(e)?null:n,events:e}},this.call=function(){return{before:s.before,success:s.success,error:s.error,after:s.after}},this.getParams=function(){return s},this.removeEventListener=function(){return!QuickRequestHelpers.isValueEmpty(e)&&(e.forEach(e=>{e.element.removeEventListener(e.event,e.func)}),this.getEvents=function(){return[]},!0)}}}const QuickRequestBlobs={config:{blob:null,name:null,extension:null},setBlob:function(e){return this.config.blob=e,this},setName:function(e){return this.config.name=e,this},setExtension:function(e){return this.config.extension=e,this},download:function(){let{blob:e,name:t,extension:i}=this.config;if(!e)throw new QuickRequestException("Blob is not set in QuickRequestBlobs.setBlob().");if(!t)throw new QuickRequestException("Name is not set in QuickRequestBlobs.setName().");if(null===i&&e.type){let s=e.type.split("/");s.length>=1&&(i=s[1])}if(null===i)throw new QuickRequestException("Extension is not set in QuickRequestBlobs.setExtension().");let n=URL.createObjectURL(e),o=(t+"."+i).replaceAll("..","."),r=document.createElement("a");r.href=n,r.download=o,r.textContent=t;let c=new MouseEvent("click",{view:window,bubbles:!0,cancelable:!1});r.dispatchEvent(c)}},QuickRequestErrors={config:{errors:{}},setErrors:function(e){return this.config.errors=e,this},toArray:function(){let e=[];for(let[t,i]of Object.entries(this.config.errors))e.push({[t]:i});return e},toArrayflatten:function(){let e=[];for(let[t,i]of Object.entries(this.config.errors))Array.isArray(i)?i.forEach(i=>{e.push({[t]:i})}):e.push({[t]:i});return e}},QuickRequest=new QuickRequestMain;